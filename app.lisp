#||
# Fileworthy

## Introduction

### TL;DR

* Fileworthy a simple app that displays the contents of a directory as a website
* Configuration is optional, with sensible defaults
* It is written in Common Lisp, in a quasi-[literate](http://www.literateprogramming.com/knuthweb.pdf) form

### Goals and Motivation

* **I want an easy way to view and edit my files and notes wherever I am**
* To this end I want a no fuss app that is able to simply point to a directory
  * and have all of it's contents displayed as a website
* Text files should be easily editable
  * I should be able to edit them from a website that's accessible wherever I am
  * or directly off my local file-system, in my favourite editor
* Consequently, a system needs to be in-place to keep the files on the website, my local computer, and any other devices in sync
* I'm already using [syncthing](https://syncthing.net) to keep my files in sync across all my devices
  * so I can just keep using that
  * the website simply becomes another device
* I don't intend to roll syncthing into this app
  * It'll need to be setup separately
  * And in fact, using a file sync tool at all is optional
  * It's only needed if you want to edit files locally
    * and not just from the website

### Solution

* Create a web app that will display the contents of a directory as a regular website
  * This directory can either be the current directory
  * or a list of directories at arbitrary paths
* Any file can be downloaded
* If the browser supports the file format
  * e.g. images, movies, etc.
  * it will render it as is
* Markdown files will be displayed as HTML
* Directories will simply be links to other pages
* Files and directories can be managed in the following ways:
  * upload new files
  * create new directories
  * rename files/directories
  * replace existing files
  * edit text files right off the website
  * edit source files from which an HTML page was generated
  * delete files/directories
* Configuration files are optional
  * i.e. use sensible defaults
  * of course this will be biased on *my* initial desires

### Non-Solutions

* You might be wondering why I don't just go with one of the many **[static site generators](https://www.staticgen.com/)**
  * or even [Nextcloud](https://nextcloud.com/)
* The main reason is that none of them seem to be able to
  * simply point to a directory and generate a website
    * without configuration
  * and be able to directly edit source markdown files
* These solutions also do a lot more than what I want
  * e.g. can serve as a blogging tool
  * and so feel too heavy a dependency to manage
* What about Dropbox, Google Drive, etc.?
  * None of these can be self-hosted
* [Flatdoc](http://ricostacruz.com/flatdoc/) probably comes the closest to what I want
  * But it still lacks lots of features I'd like

### Literate Programming

* This will also serve as my first foray into [literate programming](http://www.literateprogramming.com/knuthweb.pdf)
* However I'd rather not go the traditional web/weave/tangle approach
* Instead I want to take a quasi-literate approach where
  * all the explantory text and source code is in a single Common Lisp file
    * i.e. [app.lisp](../app.lisp)
  * the explantory text will be written
    * within Common Lisp's [multi-line comments](http://clhs.lisp.se/Body/02_dhs.htm)
    * in (Github flavoured) markdown syntax
* Obviously there are drawbacks to this approach
  * with the biggest one potentially being that I can't really write this in
    a *stream of conciousness* flow
  * instead I'll be taking a (mostly) top-down approach
* But there are also considerable advantages:
  * The code is easily run, edited and debugged within your favourite editor
    * e.g. emacs or vim
  * There's no need for the tangle phase
  * The explantory text can be easily generated by
    * slightly modifying the source file to be formatted as pure markdown, i.e.:
      * strip out the multi-line comment markers
      * wrap the code blocks within block-level code syntax
    * use one of several available markdown to HTML generators
  * See [weave.ros](../weave.ros)

## Package Definition

* We'll stick to using just a single package
  * named after the project
* In good Common Lisp practice we define the package inside `CL-USER`
* I'm also choosing not to explicitly export any symbols since
  * there will only be a single package
  * this isn'nt intended to be used *by* other packages
||#

(in-package :cl-user)

(defpackage :fileworthy
  (:use :cl :glu :local-time :split-sequence :uiop)
  (:documentation "The sole package for this app."))

(in-package :fileworthy)

#||
## Globals

* Not sure why I'm choosing to do this
  * but we'll define all global variables in a struct
* Maybe this will make it easier for testing?
||#

(defstruct globals
  "Contains global variables."
  (version-file-path)
  (app-version)
  (app-updated))

#||
* There will be a singleton instance of this struct
* I'll take the liberty of simply naming it `G`
* My justification for this name is that
  * it'll be used quite often throughout the codebase
  * so I'd rather type as little as possible
* Perhaps in the more extreme cases
  * the length of a symbol
  * should be inversely proportional to its frequency of use?
||#

(defparameter G nil)

(defun load-globals ()
  "Load global variables."
  (let ((version-file-path (asdf:system-relative-pathname
                            :fileworthy
                            "version")))
    (make-globals :version-file-path version-file-path
                  :app-version (asdf::read-file-form version-file-path)
                  :app-updated
                  (universal-to-timestamp
                   (file-write-date version-file-path)))))

#||
## Startup

* To launch the application we need only call `start`
* This will show a brief message along with the current version of the app
||#

(defun start ()
  "Starts the app."
  (setf G (load-globals))
  (format t "Started Fileworthy ~A~%" (globals-app-version G)))
