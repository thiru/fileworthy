#!/bin/sh
#|-*- mode:lisp -*-|#
#| Converts a literate Lisp source file to HTML
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ql:quickload :glu :silent t)
  (ql:quickload :local-time :silent t))

(defpackage :ros.script.weave.3679583283
  (:use :cl :glu))
(in-package :ros.script.weave.3679583283)

(defparameter help
  (sf '("usage: weave [OPTIONS] FILE~%~%"
        "Options:~%~%"
        "-h, --help    Show help~%"
        "-m, --monitor Block and continually monitor for changes~%"
        "              Otherwise document is updated once and returned")))

(defun validate-file (file)
  "Ensure `FILE' is a valid file path and that it exists."
  (cond ((empty? file)
         (return-from validate-file
           (new-r :error "No file provided")))
        ((null (probe-file file))
         (return-from validate-file
           (new-r :error (sf "File '~A' not found" file))))
        (t (new-r :success))))

(defun get-time ()
  "Get a brief time description."
  (local-time:format-timestring nil
                                (local-time:now)
                                :format '((:hour12 2) ":" (:min 2) " " :ampm)))

(defun lisp-to-markdown (lisp-file)
  "Convert the given Common Lisp file to markdown-friendly syntax."
  (let ((inside-comment? nil)
        (prev-line nil)
        (markdown (make-string-output-stream)))
    (with-open-file (stream lisp-file :direction :input)
      (loop for line = (read-line stream nil)
            while line do
              (cond ((search "#||" line)
                     (setf inside-comment? t)
                     (if prev-line
                         (format markdown "~%~A~%~%" "```")))
                    ((search "||#" line)
                     (setf inside-comment? nil)
                     (format markdown "~%~A~%" "```lisp"))
                    (t (format markdown "~A~%" line)))
              (setf prev-line line)))
    (if (null inside-comment?)
        (format markdown "~%~A~%" "```"))
    (get-output-stream-string markdown)))

(defun dump-file (text file-name)
  "Dump the contents of `TEXT' into the file specified by `FILE-NAME'."
  (with-open-file (str file-name
                       :direction :output
                       :if-exists :overwrite
                       :if-does-not-exist :create)
    (format str "~A" text)))

(defun get-file-size (file-name)
  "Get the size of `FILE-NAME'."
  (with-open-file (str file-name
                       :direction :input
                       :if-does-not-exist nil)
    (sf "~:D bytes" (if str (file-length str) 0))))

(defun run-cmd (cmd)
  "Run command specified by `CMD'.
   A result object is returned."
  (multiple-value-bind (std-out std-err ret-val)
      (uiop:run-program cmd
                        :output '(:string :stripped t)
                        :error-output '(:string :stripped t))
    (if (zerop ret-val)
        (new-r :success "" std-out)
        (new-r :error
               (sf "ERROR ~A: ~A"
                   ret-val
                   (if (and (empty? std-out) (empty? std-err))
                       "unknown (cmd reported no info)"
                       (or std-err std-out)))))))

(defun update-markdown-on-change (lisp-file)
  "Block until a modification to `LISP-FILE' is detected, then convert
   `LISP-FILE' to markdown."
  (let ((cmd-res (run-cmd (sf "inotifywait -q -q -e modify,move,move_self ~A"
                              lisp-file))))
    (if (succeeded? cmd-res)
        (new-r :success "" (lisp-to-markdown lisp-file))
        cmd-res)))

(defun file-string (path)
  "Get file contents of `PATH`."
  (with-open-file (stream path)
    (let ((data (make-string (file-length stream))))
      (read-sequence data stream)
      data)))

(defun write-html (input-file-name output-file-name)
  "Convert the given markdown file, `INPUT-FILE-NAME' to HTML using
   marked.js CLI, into the file `OUTPUT-FILE-NAME'."
  (let ((template-path "docs/template.html")
        (html-from-md "")
        (cmd-res (run-cmd (sf "marked --gfm -o ~A ~A"
                              output-file-name
                              input-file-name))))
    (if (failed? cmd-res)
        (return-from write-html cmd-res))
    (setf html-from-md (file-string output-file-name))
    (when (probe-file template-path)
      (with-open-file (template-in template-path)
        (with-open-file (template-out output-file-name
                                      :direction :output
                                      :if-exists :supersede
                                      :if-does-not-exist :create)
          (loop for line = (read-line template-in nil)
                while line
                do (if (string-equal "INJECTION POINT" (string-trim " " line))
                     (format template-out "~A" html-from-md)
                     (format template-out line)) ) )))
    (new-r :success
           (sf "updated ~A (~A)"
               output-file-name
               (get-file-size output-file-name)))))

;;; TODO: handle ctrl-c gracefully
(defun main (&rest argv)
  (declare (ignorable argv))
  (let* ((input-file (last1 argv))
         (markdown-file "docs/index.md")
         (html-file "docs/index.html"))
    ;; Show help if no arguments were given or the help option was specified
    (when (or (empty? argv)
              (find "-h" argv :test #'string-equal)
              (find "--help" argv :test #'string-equal))
      (format t "~A~%" help)
      (return-from main 0))
    ;; Abort if INPUT-FILE is invalid
    (let ((file-val (validate-file input-file)))
      (when (failed? file-val)
        (format *error-output* "ERROR: ~A~%" (r-message file-val))
        (return-from main 1)))
    (let ((cmd-res nil))
      ;; If monitor option was specified loop forever, waiting for changes
      (if (or (find "-m" argv :test #'string-equal)
              (find "--monitor" argv :test #'string-equal))
          (loop
            ;; TODO: Don't abort on error
            ;; TODO: Try to update file even if error reported
            (setf cmd-res (update-markdown-on-change input-file))
            (when (succeeded? cmd-res)
              (dump-file (r-data cmd-res) markdown-file)
              (setf cmd-res (write-html markdown-file html-file)))
            (format t "~A: ~A~%" (get-time) (r-message cmd-res))))
      ;; Otherwise just update markdown and HTML files and return
      (dump-file (lisp-to-markdown input-file) markdown-file)
      (setf cmd-res (write-html markdown-file html-file))
      (format (if (succeeded? cmd-res) t *error-output*)
              "~A~%"
              (r-message cmd-res))
      (return-from main (if (succeeded? cmd-res) 0 2)))))
;;; vim: set ft=lisp lisp:
